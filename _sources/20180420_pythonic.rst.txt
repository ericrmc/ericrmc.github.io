
.. docs post, created by `ericrmc` on Apr 20, 2018.

.. post:: Apr 20, 2018
   :tags: Python
   :author: ericrmc
.. highlight:: python3
   :linenothreshold: 4

Pythonic programming
====================

A YouTube talk on the benefits of functional "Pythonic" programming over mere PEP8 adherance
contained many great live examples.
The gist was that while some code may look correct and comply with the style guide,
it may not be the *best* way to actually go about something.
It was presented at PyCon 2015, here's the link:

`Raymond Hettinger - Beyond PEP 8 -- Best practices for beautiful intelligible code <https://www.youtube.com/watch?v=wf-BqAjZb8M>`_

One case in point was a function that looked like it had been ported over from Java.
Sure, it may have the correct indenting and formatting that PEP8 demands, but it wasn't
incorporating some of the fantastic efficiencies that Python has built in, right out of the box.
I've noted down some of the examples but for further explanation please see the video.

* Custom exceptions

::

    class MyClassException():
        pass

    if failure:
      raise MyClassException('error 1')

* Named tuples for better item management:

::

  from collections import namedtuple
  Colour = namedtuple('Colour', ['hue','saturation','value'])
  p = Colour(1,2,3)
  p.saturation == 2

* Use more descriptive variable and function names, and include keywords in arguments to assist readability, e.g. ``connect_to_proxy(server=127, port=8080)``

* ``range()`` has been improved in Python 3, so if still on Python 2 use ``xrange()`` instead.

* Instead of ``mylist[::-1]``, use ``reversed(mylist)`` or ``for item in sorted(mylist, reverse=True)``

* Lists can also be sorted by an attribute, like the item length: ``sorted(mylist, key=len)``

* Use enumerate(mylist) instead of indices as the index is easier to use:

::

    for i, item in enumerate(mylist):
        print(i, mylist[i])

* ``zip()`` doesnt scale that well, but ``izip()`` works more efficiently in Python 3.

* A sentinel value is the last chunk of data we read in, and may sometimes just be ``\r``. Instead of using a ``while True`` loop, we can take advantage of new functionality. The ``iter()`` function arguments are a loop and the sentinel. In this case, the loop requires an argument itself, which we can't fit into ``iter()`` normally. So we use ``functools.partial()``, which breaks it up for us. We must still be careful with selection of the sentinel though, in case we actually wanted to send a carriage return or empty item.

::

    blocks = []
    for block in iter(partial(f.read, 32), ''):
        blocks.append(block)

* We can use ``for`` and ``else`` for breaking out of code blocks. Here, ``else`` means "no break".

::

    def find(seq, target):
        for i, value in enumerate(seq):
            if value == target:
                break
        else:
            return -1
        return i

* You can make a dictionary using two lists: ``d = dict(izip(lista,listb))``

* To count repeats of items in a dictionary, there is a new ``defaultdic`` method, however it may have to be converted back to a dictionary when done counting. ``collections.counter()`` is another way of doing this, too.

::

    # Older method
    d = {}
    for value in mylist:
        d[value] = d.get(value, 0) + 1

    # More modern method
    # Here, int can be called with no arguments, so it populates with 0s
    d = defaultdict(int)
    for value in mylist:
        d[value] += 1

*   A ``defaultdic`` can also be used to group items in a list based on a characteristic, such as string length, and enter in default values so they can be grouped:

::

    d = defaultdict(list)
    for name in names:
        key = len(name)
        d[key].append(name)

* ``key, value = { }.popitem()`` is atomic and thread safe.

* ``ChainMap(bestdicvars, seconddicvars, remainderdicvars)`` does a ranked map in that order.

* Use simultaneous state updates for variables, ie. have big equations with intermediate variables in one command:

::

    x, y, dx, dy = (x + dx * t,
                    y + dy * t,
                    influence(m, x, y, dx, dy, 1),
                    influence(m, x, y ,dx ,dy, 2))

* It's faster to concatenate lists of strings with ``.join()`` than ``+=``.

* We actually don't need to use square brackets for generator expressions: ``sum(i**2 for i in xrange(10))``

* Removing a file if it exists is lengthy, so use ignore instead:

::

    with ignored(OSError):
        os.remove('file.txt')

* Avoid the use of ``try``, ``finally`` and ``lock.release``. Instead, use ``with``:

::

    lock = threading.Lock()
    with lock:
        ...

* ``deque()`` is a new method used for updating variables in sequences:

::

    # Old method
    del names[0]
    names.pop(0)
    names.insert(0, 'str')

    # Modern data structure
    names = deque(names)
    del names[0]
    names.popleft()
    names.appendleft('newname')
