<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">ericrmc</title>
  <id>True/blog/atom.xml</id>
  <updated>2018-04-22T00:00:00Z</updated>
  <link href="True" />
  <link href="True/blog/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.9.2">ABlog</generator>
  <entry xml:base="True/blog/atom.xml">
    <title type="text">Distributed query processing</title>
    <id>True/20180422_distributed-query/</id>
    <updated>2018-04-22T00:00:00Z</updated>
    <published>2018-04-22T00:00:00Z</published>
    <link href="True/20180422_distributed-query/" />
    <author>
      <name>ericrmc</name>
    </author>
    <content type="html">&lt;p&gt;For distributed databases, efficient processing and transfer of records and values is paramount.
Semijoins allow for data to be sent back and forth in a way that sounds like more work,
but may in fact have less data transfer than an equivalent traditional inner join.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="True/blog/atom.xml">
    <title type="text">Pythonic programming</title>
    <id>True/20180420_pythonic/</id>
    <updated>2018-04-20T00:00:00Z</updated>
    <published>2018-04-20T00:00:00Z</published>
    <link href="True/20180420_pythonic/" />
    <author>
      <name>ericrmc</name>
    </author>
    <content type="html">&lt;p&gt;A YouTube talk on the benefits of functional “Pythonic” programming over mere PEP8 adherance
contained many great live examples.
The gist was that while some code may look correct and comply with the style guide,
it may not be the &lt;em&gt;best&lt;/em&gt; way to actually go about something.
It was presented at PyCon 2015, here’s the link:&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="True/blog/atom.xml">
    <title type="text">Sampling strategies</title>
    <id>True/20180419_sampling/</id>
    <updated>2018-04-19T00:00:00Z</updated>
    <published>2018-04-19T00:00:00Z</published>
    <link href="True/20180419_sampling/" />
    <author>
      <name>ericrmc</name>
    </author>
    <content type="html">&lt;p&gt;Employing different sampling methods allows us to better control weights and proportions of the data we’re using in statistical learning.
This allows us to fine-tune our sampling so it can be the best representation possible of the larger data, which is likely still a subset of some larger population.
In each of these examples, we will be using sampling wih replacement, as it means we retain independence and hence easier calculations later.
Three types we will look at now are:&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="True/blog/atom.xml">
    <title type="text">Getting started with Hadoop and Hive</title>
    <id>True/20180419_hadoop/</id>
    <updated>2018-04-19T00:00:00Z</updated>
    <published>2018-04-19T00:00:00Z</published>
    <link href="True/20180419_hadoop/" />
    <author>
      <name>ericrmc</name>
    </author>
    <content type="html">&lt;p&gt;The processing performance of large datasets can be improved if the task is executed in parallel across several machines.
A distributed file system is a file system where the data is stored on multiple servers,
not the local client machine. In the Hadoop Distributed Filesystem (HDFS),
the way the data is stored is abstracted away from the user, along with other server side technicalities,
allowing users to just focus on the data itself.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="True/blog/atom.xml">
    <title type="text">Comparing lists</title>
    <id>True/20180418_comparelists/</id>
    <updated>2018-04-18T00:00:00Z</updated>
    <published>2018-04-18T00:00:00Z</published>
    <link href="True/20180418_comparelists/" />
    <author>
      <name>ericrmc</name>
    </author>
    <content type="html">&lt;p&gt;Comparing the contents of two lists can be done by using sets, but in the case both lists are ordered and are the same length there is a better approach.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="True/blog/atom.xml">
    <title type="text">Key-value over databases</title>
    <id>True/20180417_keyvalue/</id>
    <updated>2018-04-17T00:00:00Z</updated>
    <published>2018-04-17T00:00:00Z</published>
    <link href="True/20180417_keyvalue/" />
    <author>
      <name>ericrmc</name>
    </author>
    <content type="html">&lt;p&gt;I encountered poor database performance when performing a join on two tables with 90,000 records each. Even though it was on a newly-made primary key, I had to cancel it after a few minutes once I realised it was going to take many hours, because it would have inhibited other progress on the project.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="True/blog/atom.xml">
    <title type="text">Introduction to the scrapy module</title>
    <id>True/20180416_scrapy/</id>
    <updated>2018-04-16T00:00:00Z</updated>
    <published>2018-04-16T00:00:00Z</published>
    <link href="True/20180416_scrapy/" />
    <author>
      <name>ericrmc</name>
    </author>
    <content type="html">&lt;p&gt;Scrapy provides an interface for connecting to web pages and capturing
information using intuitive CSS interpreters. I did a quick tutorial (linked below)
and managed to capture some data using CSS tags, and have noted down some
ways of extending the functionality with CSVs and image downloads, without being
a hindrance or performance drain on web servers.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="True/blog/atom.xml">
    <title type="text">Setting up Sphinx with ABlog</title>
    <id>True/20180415_ablog/</id>
    <updated>2018-04-15T00:00:00Z</updated>
    <published>2018-04-15T00:00:00Z</published>
    <link href="True/20180415_ablog/" />
    <author>
      <name>ericrmc</name>
    </author>
    <content type="html">&lt;p&gt;Having a folder to keep track of code snippets really helped when I was
learning Python, but now that I’m doing extra development for coursework as
well as projects it’s hard to keep it all in one place. A website was clearly
the way to go, and it needed to have timestamped posts with editable tags,
search functionality and the potential for easy expansion.&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="True/blog/atom.xml">
    <title type="text">ABlog Default First Post</title>
    <id>True/20180415_first-post/</id>
    <updated>2018-04-14T00:00:00Z</updated>
    <published>2018-04-14T00:00:00Z</published>
    <link href="True/20180415_first-post/" />
    <author>
      <name>ericrmc</name>
    </author>
    <content type="html">&lt;p&gt;World, hello again! This very first paragraph of the post will be used
as excerpt in archives and feeds. Find out how to control how much is shown
in &lt;a class=&quot;reference external&quot; href=&quot;http://ablog.readthedocs.org/manual/post-excerpts-and-images/&quot;&gt;Post Excerpts and Images&lt;/a&gt;. Remember
that you can refer to posts by file name, e.g. &lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;:ref:`20180415_first-post`&lt;/span&gt;&lt;/code&gt; results
in &lt;a class=&quot;reference internal&quot; href=&quot;../20180415_first-post/#20180415_first-post&quot;&gt;&lt;span class=&quot;std std-ref&quot;&gt;ABlog Default First Post&lt;/span&gt;&lt;/a&gt;. Find out more at &lt;a class=&quot;reference external&quot; href=&quot;http://ablog.readthedocs.org/manual/cross-referencing-blog-pages/&quot;&gt;Cross-Referencing Blog Pages&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
